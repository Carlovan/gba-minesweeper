#ifndef RANDOM_H_
#define RANDOM_H_

#ifdef GBA

#include <tonc.h>

void initialize_random_system();

class RandomSize {
public:
	RandomSize() {
		sqran(REG_TM2D);
	}

	size_t operator()(const size_t maxVal) {
		return qran_range(0, maxVal+1);
	}
};

#else

#include <ctime>
#include <random>

class RandomSize {
private:
	std::mt19937 generator{static_cast<long unsigned int>(std::time(NULL))};
	std::uniform_int_distribution<size_t> dis;

public:
	size_t operator()(const size_t maxVal) {
		dis.param(decltype(dis)::param_type{0, maxVal});
		return dis(generator);
	}
};

#endif

#endif