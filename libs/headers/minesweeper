#ifndef MINESWEEPER_H_
#define MINESWEEPER_H_

#include <memory>
#include <utility>
#include <vector>

enum class CellState {
	CLOSED = -1,
	OPENED = 0,
	FLAGGED = -2,
};

struct Position {
	int row, col;
	Position operator+(const Position &other) const {
		return {row + other.row, col + other.col};
	}
	Position operator*(const int value) const {
		return {row * value, col * value};
	}
	bool operator==(const Position &other) const {
		return row == other.row && col == other.col;
	}
};

struct Callback;

class Minesweeper {
public:
	using position_type = Position;
	using cellopened_callback_type = Callback;
	using cellopened_callback_type_ptr = std::unique_ptr<cellopened_callback_type>;
	using cell_type = signed char;
private:
	std::vector<std::vector<cell_type>> cells;
	std::vector<std::vector<bool>> mines;
	position_type cursorPosition{0,0};

	int minesCount;
	bool lost = false;
	int openedCells = 0;
	bool initialized = false;
	cellopened_callback_type_ptr cellopenedCallback = nullptr;

	void open_cell(const position_type pos);
	void initialize_mines();
	int count_neighbours(const position_type pos) const;

public:
	Minesweeper(const int gridSize);

	int columns() const;
	int rows() const;

	CellState at(const int row, const int col) const;
	CellState at(const position_type pos) const;
	bool is_mine(const int row, const int col) const;
	bool is_mine(const position_type pos) const;
	int neighbours(const int row, const int col) const;
	int neighbours(const position_type pos) const;

	bool finished() const;
	bool won() const;

	position_type cursor() const;

	void setCellOpenedCallback(cellopened_callback_type_ptr callback);
	void removeCellOpenedCallback();

	void moveh(int dir);
	void movev(int dir);
	void up();
	void right();
	void down();
	void left();
	void toggle_flag();
	void open();
};

struct Callback {
	virtual void operator()(const Minesweeper &game, const Minesweeper::position_type pos) = 0;
};

#endif