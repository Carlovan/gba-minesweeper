#ifndef MINESWEEPER_H_
#define MINESWEEPER_H_

#include <utility>
#include <vector>

enum class CellState {
	CLOSED = -1,
	OPENED = 0,
	FLAGGED = -2,
};

class Minesweeper {
public: 
	struct position_type {
		size_t x, y;
		position_type operator+(const position_type &other) const {
			return {x + other.x, y + other.y};
		}
		bool operator==(const position_type &other) const {
			return x == other.x && y == other.y;
		}
	};
	using cellopened_callback_type = void(*)(const Minesweeper &game, size_t row, size_t col);
	using cell_type = signed char;
private:
	std::vector<std::vector<cell_type>> cells;
	std::vector<std::vector<bool>> mines;
	position_type cursorPosition{0,0};

	size_t minesCount;
	bool lost = false;
	size_t openedCells = 0;
	bool initialized = false;
	cellopened_callback_type cellopenedCallback = nullptr;

	void open_cell(const position_type pos);
	void initialize_mines();
	size_t count_neighbours(const position_type pos) const;

public:
	Minesweeper(const size_t gridSize);

	size_t columns() const;
	size_t rows() const;

	CellState at(const size_t row, const size_t col) const;
	CellState at(const position_type pos) const;
	bool is_mine(const size_t row, const size_t col) const;
	size_t neighbours(const size_t row, const size_t col) const;

	bool finished() const;
	bool won() const;

	position_type cursor() const;

	void setCellOpenedCallback(cellopened_callback_type callback);
	void removeCellOpenedCallback();

	void moveh(int dir);
	void movev(int dir);
	void up();
	void right();
	void down();
	void left();
	void toggle_flag();
	void open();
};

#endif